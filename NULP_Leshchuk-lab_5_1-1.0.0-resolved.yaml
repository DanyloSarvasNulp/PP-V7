
openapi: 3.0.0
info:
  title: Auditorium Reserve
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/NULP_Leshchuk/lab_5_1/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://petstore.swagger.io/v2
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /auditorium:
    get:
      tags:
      - auditorium
      summary: Output contents
      description: Return all contents
      operationId: output_auditorium
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auditorium'
            application/xml:
              schema:
                $ref: '#/components/schemas/Auditorium'
        "405":
          description: Not allowed
    post:
      tags:
      - auditorium
      summary: Create new auditorium
      operationId: createAuditorium
      requestBody:
        description: Created new auditorium
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auditorium'
        required: true
      responses:
        "200":
          description: OK
        "201":
          description: Success
  /auditorium/{id}:
    get:
      tags:
      - auditorium
      summary: Find account by ID
      description: Returns a single account
      operationId: getAccountById
      parameters:
      - name: id
        in: path
        description: ID of account to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auditorium'
            application/xml:
              schema:
                $ref: '#/components/schemas/Auditorium'
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "405":
          description: Not allowed
      security:
      - api_key: []
    put:
      tags:
      - auditorium
      summary: Updated auditorium
      description: This can only be done by the logged in user.
      operationId: updateAuditorium
      parameters:
      - name: id
        in: path
        description: id that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auditorium'
        required: true
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Auditorium not found
    delete:
      tags:
      - auditorium
      summary: Delete auditorium
      description: This can only be done by the logged user.
      operationId: deleteAuditorium
      parameters:
      - name: id
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Success
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /access:
    post:
      tags:
      - access
      summary: Create new auditorium
      operationId: createRequest
      requestBody:
        description: Created new auditorium
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Access'
        required: true
      responses:
        default:
          description: successful operation
  /access/{user/id},{auditorium/id}:
    put:
      tags:
      - access
      summary: Updated auditorium
      description: This can only be done by the logged in user.
      operationId: updateAccess
      parameters:
      - name: user/id
        in: path
        description: id that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: auditorium/id
        in: path
        description: id that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Access'
        required: true
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Auditorium not found
    delete:
      tags:
      - access
      summary: Delete auditorium
      description: This can only be done by the logged user.
      operationId: deleteAccess
      parameters:
      - name: user/id
        in: path
        description: id that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: auditorium/id
        in: path
        description: id that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /querry:
    post:
      tags:
      - queue
      summary: Create new auditorium
      operationId: createQueue
      requestBody:
        description: Created new auditorium
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Querry'
        required: true
      responses:
        "200":
          description: OK
        "201":
          description: Success
  /querry/values:
    get:
      tags:
      - queue
      operationId: getQueue
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auditorium'
            application/xml:
              schema:
                $ref: '#/components/schemas/Auditorium'
      security:
      - api_key: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Auditorium:
      type: object
      properties:
        id:
          type: integer
          format: int64
        is_free:
          type: boolean
    Querry:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Access'
        place:
          type: integer
          format: int64
    Access:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User/properties/id'
        auditorium:
          $ref: '#/components/schemas/Auditorium/properties/id'
      xml:
        name: Access
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
